---
name: Build, Test, and Publish an Image

on:
  workflow_call:
    inputs:
      title:
        description: The title of the image
        type: string
        required: true
      description:
        description: The description of the image
        type: string
        required: true
      image:
        description: The name image to build (also corresponds to a Pixi environment)
        type: string
        required: true
      target:
        description: The target layer to build
        type: string
        required: false
      build-args:
        description: Build arguments to pass to the image
        type: string
        required: false
      cache-from:
        description: Docker images that might be able to contribute cached layers
        type: string
        required: false
      free-disk-space:
        description: Whether to free disk space before building
        type: boolean
        required: false
        default: false
      skip-tests:
        description: Whether to skip tests
        type: boolean
        required: false
        default: false

    outputs:
      image:
        description: The image name
        value: ${{ jobs.docker.outputs.image }}
      image-version:
        description: The image version
        value: ${{ jobs.docker.outputs.image.version }}
      tags:
        description: The image tags
        value: ${{ jobs.docker.outputs.tags }}
      cache-from:
        description: cache-from entries that can be used in subsequent builds
        value: ${{ jobs.docker.outputs.cache-from }}

jobs:
  docker:
    runs-on: ubuntu-latest

    outputs:
      image: ${{ inputs.image }}
      image-version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
      cache-from: ${{ steps.generate-cache-from.outputs.cache_from }}

    steps:
      - name: Free Disk Space (Ubuntu)
        if: inputs.free-disk-space
        uses: jlumbroso/free-disk-space@main
        with:
          dotnet: ${{ inputs.free-disk-space }}
          haskell: false
          large-packages: ${{ inputs.free-disk-space }}
          swap-storage: ${{ inputs.free-disk-space }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: prefix-dev/setup-pixi@v0.8.1

      - name: Update Conda packages
        shell: bash
        run: pixi update

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build for linux/arm64
        id: build-arm64
        uses: docker/build-push-action@v6
        with:
          target: ${{ inputs.target }}
          platforms: linux/arm64
          build-args: ${{ inputs.build-args }}
          secrets: |
            github_token=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:arm64
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:arm64,mode=max
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:arm64
            ${{ inputs.cache-from }}
          load: true

      - name: Test for linux/arm64
        if: inputs.skip-tests != true
        shell: bash
        run: |
          docker run --rm --platform=linux/arm64 \
            --mount=type=bind,source="./tests/test-packages.sh",target=/tmp/test-packages.sh \
            --mount=type=bind,source="./tests/packages.txt",target=/tmp/packages.txt \
            --mount=type=bind,source="./tests/${{ inputs.image }}.sh",target=/tmp/test.sh \
            ${{ fromJson(steps.build-arm64.outputs.metadata)['image.name'] }} \
            bash /tmp/test.sh

      - name: Build for linux/amd64
        id: build-amd64
        uses: docker/build-push-action@v6
        with:
          target: ${{ inputs.target }}
          platforms: linux/amd64
          build-args: ${{ inputs.build-args }}
          secrets: |
            github_token=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:amd64
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:amd64,mode=max
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:amd64
            ${{ inputs.cache-from }}
          load: true

      - name: Test for linux/amd64
        if: inputs.skip-tests != true
        shell: bash
        run: |
          docker run --rm --platform=linux/amd64 \
            --mount=type=bind,source="./tests/test-packages.sh",target=/tmp/test-packages.sh \
            --mount=type=bind,source="./tests/packages.txt",target=/tmp/packages.txt \
            --mount=type=bind,source="./tests/${{ inputs.image }}.sh",target=/tmp/test.sh \
            ${{ fromJson(steps.build-amd64.outputs.metadata)['image.name'] }} \
            bash /tmp/test.sh

      - name: Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository_owner }}/${{ inputs.image }}
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYY-MM-DD'}}
            type=sha
          labels: |
            org.opencontainers.image.title=${{ inputs.title }}
            org.opencontainers.image.description=${{ inputs.description }}
          annotations: |
            org.opencontainers.image.description=${{ inputs.description }}

      - name: Generate cache-from entries
        id: generate-cache-from
        shell: bash
        run: |
          {
            echo 'cache_from<<EOF'
            echo "type=registry,ref=${{ fromJson(steps.build-amd64.outputs.metadata)['image.name'] }}"
            echo "type=registry,ref=${{ fromJson(steps.build-arm64.outputs.metadata)['image.name'] }}"
          } >> "$GITHUB_OUTPUT"

      # https://github.com/docker/build-push-action
      - name: Build and push multi-arch
        id: build
        uses: docker/build-push-action@v6
        with:
          target: ${{ inputs.target }}
          platforms: linux/amd64,linux/arm64
          build-args: ${{ inputs.build-args }}
          secrets: |
            github_token=${{ secrets.GITHUB_TOKEN }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: ${{ steps.generate-cache-from.outputs.cache_from }}
          push: true
