---
name: Publish the Images

on:
  workflow_dispatch:
    runs-on:
      description: "The platform to build on"
      type: string
      required: false
      default: "ubuntu-latest"
    cache:
      description: "Should the build cache be used?"
      type: boolean
      required: false
      default: true
    cache-from:
      description: Build cache-from passed to docker/build-push-action.
      type: string
      required: false
      default: type=gha
    cache-to:
      description: Build cache-to passed to docker/build-push-action.
      type: string
      required: false
      default: type=gha,mode=max
  push:
    branches: [main]
    paths:
      - .github/actions/**
      - .github/workflows/publish.yml
      - base-r-notebook/**
      - essentials-builder/**
      - essentials-notebook/**
      - r-notebook/**
      - datascience-notebook/**
      - scripts/**
  schedule:
    # Weekly, at 03:00 on Monday UTC time (see https://crontab.guru)
    - cron: "0 3 * * 1"

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.step1.outputs.some_var }}
      r-version: ${{ steps.step1.outputs.another_var }}
    steps:
      - name: Print inputs passed to the reusable workflow
        id: step1
        run: |
          echo "python-version=3.10" >> $GITHUB_OUTPUT
          echo "r-version=4.2" >> $GITHUB_OUTPUT

  base-r-notebook:
    needs: env
    uses: ./.github/workflows/build-and-push.yml
    secrets: inherit
    with:
      runs-on: ${{ inputs.runs-on || "ubuntu-latest" }}
      image: "base-notebook"
      python-version: ${{ needs.env.outputs.python-version }}
      r-version: ${{ needs.env.outputs.r-version }}
      build-args: |
        PYTHON_VERSION=${{ needs.env.outputs.python-version }}
        R_VERSION=${{ needs.env.outputs.r-version }}
      cache-from: ${{ inputs.cache && inputs.cache-from || "" }}
      cache-to: ${{ inputs.cache && inputs.cache-to || "" }}

  essentials-builder:
    needs: [env, base-r-notebook]
    uses: ./.github/workflows/build-and-push.yml
    secrets: inherit
    with:
      runs-on: ${{ inputs.runs-on || "ubuntu-latest" }}
      image: "essentials-builder"
      python-version: ${{ needs.env.outputs.python-version }}
      r-version: ${{ needs.env.outputs.r-version }}
      build-args: BASE_TAG=r-${{ needs.env.outputs.r-version }}
      build-contexts: scripts=scripts
      cache-from: ${{ inputs.cache && inputs.cache-from || "" }}
      cache-to: ${{ inputs.cache && inputs.cache-to || "" }}

  essentials-notebook:
    needs: [env, essentials-builder]
    uses: ./.github/workflows/build-and-push.yml
    secrets: inherit
    with:
      runs-on: ${{ inputs.runs-on || "ubuntu-latest" }}
      image: "essentials-notebook"
      python-version: ${{ needs.env.outputs.python-version }}
      r-version: ${{ needs.env.outputs.r-version }}
      build-args: BASE_TAG=r-${{ needs.env.outputs.r-version }}
      build-contexts: scripts=scripts
      cache-from: ${{ inputs.cache && inputs.cache-from || "" }}
      cache-to: ${{ inputs.cache && inputs.cache-to || "" }}

  r-notebook:
    needs: [env, essentials-builder]
    uses: ./.github/workflows/build-and-push.yml
    secrets: inherit
    with:
      runs-on: ${{ inputs.runs-on || "ubuntu-latest" }}
      image: "r-notebook"
      python-version: ${{ needs.env.outputs.python-version }}
      r-version: ${{ needs.env.outputs.r-version }}
      build-args: BASE_TAG=r-${{ needs.env.outputs.r-version }}
      build-contexts: scripts=scripts
      cache-from: ${{ inputs.cache && inputs.cache-from || "" }}
      cache-to: ${{ inputs.cache && inputs.cache-to || "" }}

  datascience-notebook:
    needs: [env, r-notebook]
    uses: ./.github/workflows/build-and-push.yml
    secrets: inherit
    with:
      runs-on: ${{ inputs.runs-on || "ubuntu-latest" }}
      image: "datascience-notebook"
      python-version: ${{ needs.env.outputs.python-version }}
      r-version: ${{ needs.env.outputs.r-version }}
      build-args: BASE_TAG=python-${{ needs.env.outputs.python-version }}
      build-contexts: scripts=scripts
      cache-from: ${{ inputs.cache && inputs.cache-from || "" }}
      cache-to: ${{ inputs.cache && inputs.cache-to || "" }}
