#!/bin/bash


# Don't run this outside of a container --- it is designed to overwrite files.


isDocker(){
    local cgroup=/proc/1/cgroup
    test -f $cgroup && [[ "$(<$cgroup)" = *:cpuset:/docker/* ]]
}

isDockerBuildkit(){
    local cgroup=/proc/1/cgroup
    test -f $cgroup && [[ "$(<$cgroup)" = *:cpuset:/docker/buildkit/* ]]
}

isDockerContainer(){
    [ -e /.dockerenv ]
}

if isDockerBuildkit || (isDocker && ! isDockerContainer)
then
    echo "This script is not designed to be run outside of a container."
    exit 1
fi



# Check for correct number of arguments
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 <file-with-absolute-paths> <mount-directory> <output-directory>"
    exit 1
fi

PATHS_FILE=$1
MOUNT_DIR=$2
OUTPUT_DIR=$3

# Ensure that the mount directory exists
if [ ! -d "${MOUNT_DIR}" ]; then
    echo "Mount directory does not exist: ${MOUNT_DIR}"
    exit 1
fi

# Ensure that the paths file only contains absolute paths
if grep -q -v "^/" ${PATHS_FILE}; then
    echo "Paths file contains relative paths"
    exit 1
fi

# Trim trailing slashes from the mount directory if they exist
MOUNT_DIR=${MOUNT_DIR%/}

# If the output directory does not exist, create it
if [ ! -d "${OUTPUT_DIR}" ]; then
    mkdir -p "${OUTPUT_DIR%/}"
fi

while read -r line; do
    mounted_path="${MOUNT_DIR}${line}"
    cp -RL "${mounted_path}" "${line}"
done < "${PATHS_FILE}"
